<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Apps in Lisp: Know-how</title><link>http://example.org/index.html</link><description>You want to write a web application in Common Lisp and you don’t know where to start? You are a beginner in web development, or a lisp amateur looking for clear and short pointers about web dev in Lisp? You are all at the right place.
What’s in this guide We’ll start with a tutorial that shows the essential building blocks:
starting a web server defining routes grabbing URL parameters rendering templates and running our app from sources, or building a binary. We’ll build a simple page that presents a search form, filters a list of products and displays the results.</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorial part 1</title><link>http://example.org/tutorial/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/tutorial/index.html</guid><description>Are you ready to build a web app in Common Lisp?
In this first tutorial we will build a simple app that shows a web form that will search and display a list of products.
In doing so, we will see many necessary building blocks to write web apps in Lisp:
how to start a server how to create routes how to define and use path and URL parameters how to define HTML templates how to run and build the app, from our editor and from the terminal. In doing so, we’ll experience the interactive nature of Common Lisp and we’ll learn important commands: running sbcl from the command line with a couple options, what is load, how to interactively compile our app with a keyboard shortcut, how to structure a project with an .asd definition and a package, etc.</description></item><item><title>Building blocks</title><link>http://example.org/building-blocks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/building-blocks/index.html</guid><description>In this chapter we’ll create routes, we’ll serve local files and we’ll run more than one web app in the same running image.
We’ll use those libraries:
(ql:quickload '("hunchentoot" "easy-routes" "djula" "spinneret")) Info You can create a web project with our project generator: cl-cookieweb.
We will use the Hunchentoot web server, but we should say a few words about Clack too.
Hunchentoot is
a web server and at the same time a toolkit for building dynamic websites. As a stand-alone web server, Hunchentoot is capable of HTTP/1.1 chunking (both directions), persistent connections (keep-alive), and SSL. It provides facilities like automatic session handling (with and without cookies), logging, customizable error handling, and easy access to GET and POST parameters sent by the client.</description></item><item><title>Isomorphic web frameworks</title><link>http://example.org/isomorphic-web-frameworks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/isomorphic-web-frameworks/index.html</guid><description>We’ll see first: Reblocks.
Weblocks was an old framework developed by Slava Akhmechet, Stephen Compall and Leslie Polzer. After nine calm years, it saw a very active update, refactoring and rewrite effort by Alexander Artemenko. This active project is named Reblocks.
The Ultralisp website is an example Reblocks website in production known in the CL community.
It isn’t the only solution that aims at making writing interactive web apps easier, where the client logic can be brought to the back-end. See also:</description></item><item><title>See also</title><link>http://example.org/see-also/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/see-also/index.html</guid><description>Other tutorials:
Neil Munro’s Clack/Lack/Ningle tutorial the Cookbook Project skeletons and demos:
cl-cookieweb - a web project template lisp-web-template-productlist, a simple project template with Hunchentoot, Easy-Routes, Djula and Bulma CSS. lisp-web-live-reload-example - a toy project to show how to interact with a running web app. Libraries:
awesome-cl</description></item></channel></rss>