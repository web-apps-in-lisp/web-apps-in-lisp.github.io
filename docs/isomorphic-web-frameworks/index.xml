<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Isomorphic web frameworks :: Web Apps in Lisp: Know-how</title><link>http://example.org/isomorphic-web-frameworks/index.html</link><description>We’ll see first: Reblocks.
Weblocks was an old framework developed by Slava Akhmechet, Stephen Compall and Leslie Polzer. After nine calm years, it saw a very active update, refactoring and rewrite effort by Alexander Artemenko. This active project is named Reblocks.
The Ultralisp website is an example Reblocks website in production known in the CL community.
It isn’t the only solution that aims at making writing interactive web apps easier, where the client logic can be brought to the back-end. See also:</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://example.org/isomorphic-web-frameworks/index.xml" rel="self" type="application/rss+xml"/><item><title>Reblocks</title><link>http://example.org/isomorphic-web-frameworks/weblocks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/isomorphic-web-frameworks/weblocks/index.html</guid><description>Reblocks is a widgets-based and server-based framework with a built-in ajax update mechanism. It allows to write dynamic web applications without the need to write JavaScript or to write lisp code that would transpile to JavaScript. It is thus super exciting. It isn’t for newcomers however.
The Reblocks’s demo we will build is a TODO app:
Note To install Reblocks, please see its documentation.</description></item><item><title>CLOG</title><link>http://example.org/isomorphic-web-frameworks/clog/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/isomorphic-web-frameworks/clog/index.html</guid><description>CLOG, the Common Lisp Omnificent GUI, follows a GUI paradigm for the web platform. You don’t write nested &lt;div> tags, but you place elements on the page. It sends changes to the page you are working on through websockets, as you add or edit functionalities. We can see changes in real time. For example, change a colour:
CLOG-USER> (setf (background-color *body*) :red) and BAM, it’s red.
We can say the CLOG experience is mindblowing.</description></item></channel></rss>